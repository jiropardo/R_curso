---
title: "Proyecto Final"
format:
  docx:
    toc: false
    toc-depth: 3
---

```{r}
#| include: false
#Carga de librerias
library(tidyverse)
library(readxl)
library(flextable)
```

## Estudiantes

Luis Fernando Marin Guzman

Jairo Steven Prado Abarca

Bayron Josue Roman Madriz

Johan Esteban Sanabria Redondo

```{r}
#| include: false
#Carga de los datos
df <- read_excel("../ventas_grupo_2.xlsx")
#df <- read_excel("../ventas_grupo_2_teest.xlsx")
#df <- read_excel("../ventas_grupo_2_last.xlsx")
```

## Informe automatizado

## Parametros de cambio

```{r}
#| include: false
mes_analisis <- "Abril"
anio_analisis <- 2025 
producto_analisis <- "Producto B"
region_analisis <- 2
```

```{r}
#| include: false
# Vector de mses
meses_es <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio","Julio", "Agosto", "Septiembre", "Octubre","Noviembre","Diciembre")

# Guarda fecha con formato

fecha_analisis <- as.Date(sprintf("%d-%02d-01", anio_analisis, match(mes_analisis, meses_es))) # 2025-02-01
```

```{r}
#| include: false
# calcular ventas totales por mes y año
datos_totales <- df %>% group_by(Fecha) %>% 
                  summarise(Total_Ventas= sum(Ventas)) %>% 
                  mutate(Mes= month(Fecha, label=TRUE, abbr = FALSE),
                         Año= year(Fecha))
```

```{r}
#| include: false
# filtro de datos hasta la fecha
datos_totales_filtrados <- datos_totales %>% filter(Fecha <=fecha_analisis)
```

```{r}
#| include: false
### function 1 para calcular crecimiento de ventas
#del producto respecto al año anterior
#| include: false
compare_ventas_Aglobal <- function(df, input_year) {
  # sort por año
  df_sorted <- df %>%
    arrange(Año)
  
  # encontrar fila 
  row_index <- which(df_sorted$Año == input_year)
  
  # verificas si existe
  if(length(row_index) == 0) {
    return("Año no encontrado en el dataset")
  }
  
  # Comparar con la anteior 
  if(row_index > 1) {
    current_ventas <- df_sorted$Ventas_totales[row_index]
    previous_ventas <- df_sorted$Ventas_totales[row_index - 1]
    
    # Vector for growth/decrease
    result_vector <- c("crecimiento", "decrecimiento", "datos insuficientes con respecto al año anterior para confirmar crecimiento o decrecimiento")
    
    # devoler "Crecimiento" si es mayor, "Decrecimiento" si es menor
    if(current_ventas > previous_ventas) {
      return(result_vector[1])  # "Crecimiento"
    } else {
      return(result_vector[2])  # "Decrecimiento"
    }
  } else {
    return("No previous year to compare")
  }
}

```


# Cálculos de Análisis

## 1.Análisis Global

#### 1.1 Análisis acumulado anual por año Global

```{r}
#| include: false
# Preparar un cuadro acumulado de cálculo anual

# ventas_totales_por_anio
acumulado_anual <- datos_totales %>%  
group_by(Año) %>% summarise(Ventas_totales= sum(Total_Ventas)) %>% arrange(Año)

# Cálculo de diferencias
acumulado_anual_diferencias <- acumulado_anual %>% mutate(Dif_abs=Ventas_totales-lag(Ventas_totales),
       Dif_por= round((Ventas_totales/lag(Ventas_totales)-1)*100,2                                        ))
```

```{r}
#| include: false
# Función personalizada para agregar el símbolo de porcentaje
formato_porcentaje <- function(x) {
  paste0(round(x, 2), "%")
}
```

```{r}
#| include: false
# función de elección de sinónimo
#| include: false
selecciona_sinonimo <- function(valor, posicion) {
  if (is.na(valor)) {
    return("sin datos para comparar")
  }
  if (valor > 0) {
    sinonimos <- c("crecimiento", "incremento", "aumento", "ascenso")
  } else if (valor < 0) {
    sinonimos <- c("decrecimiento", "disminución", "reducción", "descenso")
  } else {
    return("sin cambio")
  }
  
  if (missing(posicion)) {
    # Si no se proporciona "posición", se elige uno aleatoriamente.
    return(sample(sinonimos, 1))
  } else if (posicion > 0 && posicion <= length(sinonimos)) {
    return(sinonimos[posicion])
  } else {
    warning("La posición especificada no es válida. Se seleccionará un sinónimo aleatoriamente.")
    return(sample(sinonimos, 1))
  }
}
```

```{r}
#| echo: false
ft <- flextable(acumulado_anual_diferencias)
ft <- autofit(ft)
ft <- colformat_num(ft, j = "Dif_por", digits = 2, suffix = "%", na_str = "-")
ft
```
Comparando las ventas del año `r anio_analisis` con respecto al año anterior `r anio_analisis-1` hubo `r compare_ventas_Aglobal(acumulado_anual_diferencias, anio_analisis)`.


#### 1.2 Comparación intermensual (Mes actual vs mes anterior)

```{r}
#| include: false
ventas_totales_mes <- datos_totales %>% filter(Fecha==fecha_analisis)

ventas_totales_mes_anterior <- datos_totales %>% filter(Fecha== fecha_analisis %m-% months(1))

ventas_dif_mes <- rbind(ventas_totales_mes_anterior,ventas_totales_mes)

# Calculo de diferencias
ventas_dif_mes <- ventas_dif_mes %>% mutate(Dif_abs=Total_Ventas-lag(Total_Ventas),
       Dif_por= round((Total_Ventas/lag(Total_Ventas)-1)*100,2                                        ))
```

```{r}
#| echo: false
ft <- flextable(ventas_dif_mes[, c("Total_Ventas", "Mes","Año","Dif_abs","Dif_por")]) 
ft <- autofit(ft) 
ft <- colformat_num(ft, j = "Dif_por", digits = 2, suffix = "%", na_str = "-")
ft 
```

En el mes de `r mes_analisis` del año `r anio_analisis` las ventas fueron de `r format(tail(ventas_dif_mes$Total_Ventas,1), big.mark=",")`, y las ventas tuvieron un `r selecciona_sinonimo(tail(ventas_dif_mes$Dif_abs,1),1)` de `r tail(ventas_dif_mes$Dif_abs,1)` dólares con respecto al mes anterior

#### 1.3 Comparación interanual mismo mes vs mismo mes del año anterior)

```{r}
#| include: false
ventas_totales_mes <- datos_totales %>% filter(Fecha==fecha_analisis)

ventas_totales_mes_anterior_interanual <- datos_totales %>% filter(Fecha== fecha_analisis %m-% years(1))

ventas_dif_mes_interanual <- rbind(ventas_totales_mes_anterior_interanual,ventas_totales_mes)

# Calculo de diferencias
ventas_dif_mes_interanual <- ventas_dif_mes_interanual %>% mutate(Dif_abs=Total_Ventas-lag(Total_Ventas),
       Dif_por= round((Total_Ventas/lag(Total_Ventas)-1)*100,2                                        ))
```

```{r}
#| echo: false
ft <- flextable(ventas_dif_mes_interanual[, c("Total_Ventas", "Mes","Año","Dif_abs","Dif_por")]) 
ft <- autofit(ft) 
ft <- colformat_num(ft, j = "Dif_por", digits = 2, suffix = "%", na_str = "-")
ft 

```

En el mes de `r mes_analisis` del año `r anio_analisis` las ventas fueron de `r format(tail(ventas_dif_mes_interanual$Total_Ventas,1), big.mark=",")` dólares, y las ventas tuvieron un `r selecciona_sinonimo(tail(ventas_dif_mes_interanual$Dif_abs,1),1)` de `r tail(ventas_dif_mes_interanual$Dif_por,1)`% con respecto al mes del año anterior.

## 2.Análisis por Dimensión

### 2.1Ventas mensuales x producto hasta fecha de análisis 

```{r}
#| include: false
#ventas mensuales x producto hasta fecha de analisis 

ventas_mensuales_producto <- df %>%
  filter(Producto == producto_analisis & Fecha <= fecha_analisis) %>% 
  mutate(Año = year(Fecha), Mes = month(Fecha)) %>%  #
  group_by(Producto, Año, Mes) %>% 
  summarise(Total_Ventas_Producto = sum(Ventas, na.rm = TRUE), .groups = "drop")
```

### 2.2 Análisis por Producto

#### 2.2.1 -Análisis acumulado anual por Producto

```{r}
#| include: false
acumulado_anual_producto <- df %>%
  filter(Producto == producto_analisis) %>%  
  mutate(Año = year(Fecha)) %>%  
  group_by(Producto, Año) %>%  
  summarise(Total_Ventas_Producto_Anual = sum(Ventas, na.rm = TRUE), .groups = "drop")
```

```{r}
#| echo: false
ft <- flextable(acumulado_anual_producto)
ft <- autofit(ft)
ft
```


#### 2.2.2 -Análisis intermensual por Producto

```{r}
#| include: false
ventas_totales_mes_producto <- df %>%
filter(Fecha==fecha_analisis & Producto == producto_analisis) %>%
group_by(Fecha, Producto) %>% summarise(Total_Ventas=sum(Ventas))  %>%
ungroup()

ventas_totales_mes_anterior_producto <- df %>% filter(Fecha== fecha_analisis %m-% months(1) & Producto == producto_analisis) %>%
group_by(Fecha, Producto) %>% summarise(Total_Ventas=sum(Ventas))  %>%
ungroup()

ventas_dif_mes_producto <- rbind(ventas_totales_mes_anterior_producto ,ventas_totales_mes_producto)

# Calculo de diferencias
ventas_dif_mes_producto <- ventas_dif_mes_producto %>% mutate(Dif_abs=Total_Ventas-lag(Total_Ventas),
       Dif_por= round((Total_Ventas/lag(Total_Ventas)-1)*100,2                                        ))
```
```{r}
#| echo: false
ft <- flextable(ventas_dif_mes_producto[, c("Fecha","Total_Ventas", "Producto","Dif_abs","Dif_por")]) 
ft <- autofit(ft) 
ft <- colformat_num(ft, j = "Dif_por", digits = 2, suffix = "%", na_str = "-")
ft 
```

#### 2.2.3 -Análisis interanual por Producto

```{r}
#| include: false
#
ventas_totales_mes_interanual_producto <- df %>% filter(Fecha==fecha_analisis & Producto == producto_analisis) %>%
group_by(Fecha, Producto) %>% summarise(Total_Ventas=sum(Ventas))  %>%
ungroup()

ventas_totales_mes_anterior_interanual_producto <- df %>% filter(Fecha== fecha_analisis %m-% years(1) & Producto == producto_analisis) %>%
group_by(Fecha, Producto) %>% summarise(Total_Ventas=sum(Ventas))  %>%
ungroup()

ventas_dif_mes_interanual_producto <- rbind(ventas_totales_mes_interanual_producto,ventas_totales_mes_anterior_interanual_producto)

ventas_dif_mes_interanual_producto <- ventas_dif_mes_interanual_producto %>%
  arrange(Fecha)

# Calculo de diferencias
ventas_dif_mes_interanual_producto <- ventas_dif_mes_interanual_producto %>% mutate(Dif_abs=Total_Ventas-lag(Total_Ventas),
       Dif_por= round((Total_Ventas/lag(Total_Ventas)-1)*100,2                                        ))
#
```
```{r}
#| echo: false
ft <- flextable(ventas_dif_mes_interanual_producto[, c("Fecha","Total_Ventas", "Producto","Dif_abs","Dif_por")]) 
ft <- autofit(ft) 
ft <- colformat_num(ft, j = "Dif_por", digits = 2, suffix = "%", na_str = "-")
ft 
```


### 2.3 Análisis por Región

#### 2.3.1 -Análisis acumulado anual por Región

```{r}
#| include: false
acumulado_anual_region <- df %>%
  filter(Region == region_analisis) %>%  
  mutate(Año = year(Fecha)) %>%  
  group_by(Region, Año) %>%  
  summarise(Total_Ventas_Region_Anual = sum(Ventas, na.rm = TRUE), .groups = "drop")
```

```{r}
#| echo: false
ft <- flextable(acumulado_anual_region)
ft <- autofit(ft)
ft
```


#### 2.3.2 -Análisis intermensual por Región

```{r}
#| include: false
ventas_totales_mes_region <- df %>% filter(Fecha==fecha_analisis & Region == region_analisis) %>%
group_by(Fecha, Region) %>% summarise(Total_Ventas=sum(Ventas))  %>%
ungroup()

ventas_totales_mes_anterior_region <- df %>% filter(Fecha== fecha_analisis %m-% months(1) & Region == region_analisis) %>%
group_by(Fecha, Region) %>% summarise(Total_Ventas=sum(Ventas))  %>%
ungroup()

ventas_dif_mes_region <- rbind(ventas_totales_mes_anterior_region,ventas_totales_mes_region)

ventas_dif_mes_region <- ventas_dif_mes_region %>% mutate(
    Dif_abs = Total_Ventas - lag(Total_Ventas),
    Dif_por = round((Total_Ventas / lag(Total_Ventas) - 1) * 100, 2))
```

```{r}
#| echo: false
ft <- flextable(ventas_dif_mes_region[, c("Fecha","Total_Ventas", "Region","Dif_abs","Dif_por")]) 
ft <- autofit(ft) 
ft <- colformat_num(ft, j = "Dif_por", digits = 2, suffix = "%", na_str = "-")
ft 
```


#### 2.3.3 -Análisis interanual por Región

```{r}
#| include: false
ventas_totales_mes_interanual_region <- df %>% filter(Fecha==fecha_analisis & Region == region_analisis) %>%
group_by(Fecha, Region) %>% summarise(Total_Ventas=sum(Ventas))  %>%
ungroup()

ventas_totales_mes_anterior_interanual_region <- df %>% filter(Fecha== fecha_analisis %m-% years(1) & Region == region_analisis) %>%
group_by(Fecha, Region) %>% summarise(Total_Ventas=sum(Ventas))  %>%
ungroup()

ventas_dif_mes_interanual_region <- rbind(ventas_totales_mes_interanual_region,ventas_totales_mes_anterior_interanual_region)

ventas_dif_mes_interanual_region <- ventas_dif_mes_interanual_region %>%
  arrange(Fecha)

# Calculo de diferencias
ventas_dif_mes_interanual_region <- ventas_dif_mes_interanual_region %>% mutate(Dif_abs=Total_Ventas-lag(Total_Ventas),
       Dif_por= round((Total_Ventas/lag(Total_Ventas)-1)*100,2                                        ))
```

```{r}
#| echo: false
ft <- flextable(ventas_dif_mes_interanual_region[, c("Fecha","Total_Ventas", "Region","Dif_abs","Dif_por")]) 
ft <- autofit(ft) 
ft <- colformat_num(ft, j = "Dif_por", digits = 2, suffix = "%", na_str = "-")
ft 
```


## 3.Gráficas 

### 3.1 Tabla Comparación ventas anuales globales

```{r}
#| echo: false
#| message: false
#| warning: false
ggplot(acumulado_anual, aes(x = Año, y = Ventas_totales)) +
  geom_line(color = "steelblue", size = 1.2) +
  geom_point(color = "darkred", size = 3) +
  labs(
    title = "Comparación Ventas Globales por Año",
    x = "Año",
    y = "Ventas Totales"
  )
```

### 3.2 Tabla Comparación ventas anuales producto `r producto_analisis` 

```{r}
#| echo: false
#| message: false
#| warning: false
ggplot(acumulado_anual_producto, aes(x = Año, y = Total_Ventas_Producto_Anual, group = Producto)) +
  geom_line(color = "blue", size = 1) +  # Line color and size
  geom_point(color = "red", size = 3) +  # Points on the line
  labs(title = "Ventas Anuales por Producto",
       x = "Año",
       y = "Total de Ventas Anuales") +
  theme_minimal()
```
### 3.3 Tabla Comparación ventas anuales por Región `r region_analisis` 

```{r}
#| echo: false
#| message: false
#| warning: false
ggplot(acumulado_anual_region, aes(x = Año, y = Total_Ventas_Region_Anual, group = Region)) +
  geom_line(color = "green", size = 1) +  # Line color and size
  geom_point(color = "cyan", size = 3) +  # Points on the line
  labs(title = "Ventas Anuales por Region",
       x = "Año",
       y = "Total de Ventas Anuales") +
  theme_minimal()
```


